'''
Query tlsh on Malware Bazaar bazaar.abuse.ch
Register for free to get an API key
Proof of concept to play with TLSH as a potential XDR enrichment
Trend Micro XDR Product Manager Team, November 2020
'''
import requests
import json
import jellyfish # or you could use TLSH python library as well
import tmconfig  #tmconfig.py with your api keys. Optional

headers = {'API-KEY': tmconfig.bazaar_api_key} # you can just replace tmconfig by the API key string too

def query_info(hash):
    # https://bazaar.abuse.ch/api/#tlsh
    # Optional: Max number of results you want to display (default: 100, max: 1'000)
    data = {
            'query': 'get_info',
            'hash': hash,
            }
    # same as UI https://bazaar.abuse.ch/sample/965b76f9ea006ff87e31b287638ae81674f0692100bdb0b0c7ded278803fb61f/
    response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data, timeout=15, headers=headers)
    json_response = response.content.decode("utf-8", "ignore")
    print(json_response)
    return json_response

def querytlsh(tlsh):
    #https://bazaar.abuse.ch/api/#tlsh
    # Optional: Max number of results you want to display (default: 100, max: 1'000)
    data = {
            'query': 'get_tlsh',
            'tlsh': tlsh,
            'limit': 50,
            }

    # same as UI https://bazaar.abuse.ch/browse.php?search=tlsh:4674DF70A680B47EE082C53A07A522C37BA9BD9767519CC75F393E0A49740DBED34E27
    response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data, timeout=15, headers=headers)
    json_response = response.content.decode("utf-8", "ignore")
    print(json_response)
    return json_response

def getTLSHfromInfo(infos):
    info = json.loads(infos)
    tlsh = ''
    if info['query_status'] == "ok":
        if "tlsh" in info['data'][0]:
            # print("Key exist in JSON data")
            tlsh = info['data'][0]['tlsh']
            print('TLSH  = '+ tlsh)
    return tlsh


def getSimilarityRpt(similar, hash, base_tlsh):
    # hash is a sha1, support other main hashes
    rpt = json.loads(similar)
    lengh = len(base_tlsh)
    sim = {'sha1_hash' : hash,
           'tlsh' : base_tlsh,
           'data' :   [] ,
    }
    if rpt['query_status'] == "ok":

        print(str(len(rpt['data'])-1) + " similar files to ")
        print('Base : ' + hash + '  tlsh: ' + base_tlsh)
        for sub in rpt['data']:
            dist = jellyfish.levenshtein_distance(base_tlsh, sub['tlsh'])
            percent = str(round(100 * ((lengh - dist) / lengh), 2)) + "%"
            if sub['sha1_hash'] != hash:
                print('Sha1 : ' + sub['sha1_hash'] + '  tlsh: ' + sub['tlsh'] + ' Similar at : ' + percent + '  tags:  '+ str(sub['tags']))
                data= {}
                data['sha1_hash'] =sub['sha1_hash']
                data['tlsh'] = sub['tlsh']
                data['similar'] = percent
                sim['data'].append(data)
        y = json.dumps(sim, indent=4)
        return y
    else:
        return rpt['query_status']


#Testing
print("Malware Bazaar example get_info API")
# this SHA1 should return tlsh 4674DF70A680B47EE082C53A07A522C37BA9BD9767519CC75F393E0A49740DBED34E27
#sha1 of an emotet malware
hash = 'd858e0a31fc5902d7fcfd615a235806c2f90cd18'
print("Get informations for : "+ hash)
infos = query_info(hash)
print("Parse returned informations to get TLSH")
tlsh = getTLSHfromInfo(infos)  # this should return 4674DF70A680B47EE082C53A07A522C37BA9BD9767519CC75F393E0A49740DBED34E27
print("Malware Bazaar example get tlsh from sha1: "+ hash + '   is  '+ tlsh)
similar = querytlsh(tlsh)
ret = getSimilarityRpt(similar, hash, tlsh)
print(ret)


#Additional test : no results. This happen often because Malware Bazaar corpus is not that big.
#print("Test TLSH no result for 13E30127E544CF07E528C3F4BD434E5A97770B2CA28AB4DE8029FE9E9F40B260B9151D")
#querytlsh("13E30127E544CF07E528C3F4BD434E5A97770B2CA28AB4DE8029FE9E9F40B260B9151D")
